import edu.ucr.cs.riple.taint.ucrtainting.qual.RTainted;
import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;

package java.awt;
public class Desktop {
    public void open(@RUntainted File);
}

package java.util;
public static class Base64.Decoder {
    public byte[] decode(@RUntainted byte[] src);
    public @RUntainted int decode(@RUntainted byte[] src, byte[] dst);
    public @RUntainted ByteBuffer decode(@RUntainted ByteBuffer buffer);
    public byte[] decode(@RUntainted String src);
}

public static class Base64.Encoder {
    public byte[] encode(@RUntainted byte[] src);
    public @RUntainted int encode(@RUntainted byte[] src, byte[] dst);
    public @RUntainted ByteBuffer encode(@RUntainted ByteBuffer buffer);
    public @RUntainted String encodeToString(@RUntainted byte[] src);
}

public class Scanner {
    public Scanner(@RUntainted String source);
    public Scanner(@RUntainted File source);
    public Scanner(@RUntainted File source, String charsetName);
    public Scanner(@RUntainted InputStream source);
    public Scanner(@RUntainted InputStream source, String charsetName);
    public Scanner(@RUntainted Path source);
    public Scanner(@RUntainted Path source, String charsetName);
    public Scanner(@RUntainted Readable source);
    public Scanner(@RUntainted ReadableByteChannel source);
    public Scanner(@RUntainted ReadableByteChannel source, String charsetName);
}

package java.net;
public class Socket {
    public Socket(@RUntainted InetAddress address, int port);
    public Socket(@RUntainted InetAddress host, int port, boolean stream);
    public Socket(@RUntainted InetAddress address, int port, InetAddress localAddr, int localPort);
    public Socket(@RUntainted String host, int port);
    public Socket(@RUntainted String host, int port, boolean stream);
    public Socket(@RUntainted String host, int port, InetAddress localAddr, int localPort);
}

public final class URI {
    public URI(@RUntainted String str);
    public URI(String scheme, String userInfo, @RUntainted String host, int port, String path, String query, String fragment);
    public URI(String scheme, @RUntainted String host, String path, String fragment);
}

public abstract class URLConnection {
    public URLConnection(@RUntainted URI uri);
}

package java.lang.reflect;
public final class Method {
    public @RUntainted Object invoke(@RUntainted Object obj, Object... args);
}

package java.beans;
public class Introspector {
    public static @RUntainted BeanInfo getBeanInfo(@RUntainted Class<?> beanClass);
    public static @RUntainted BeanInfo getBeanInfo(@RUntainted Class<?> beanClass, Class<?> stopClass);
    public static @RUntainted BeanInfo getBeanInfo(@RUntainted Class<?> beanClass, Class<?> stopClass, int flags);
    public static @RUntainted BeanInfo getBeanInfo(@RUntainted Class<?> beanClass, int flags);
}

package java.io;
public class BufferedReader {
    public @RUntainted int read(@RUntainted char[] cbuf, int off, int len);
}

public class RandomAccessFile {
    public @RUntainted int read(@RUntainted byte[] b);
    public @RUntainted int read(@RUntainted byte[] b, int off, int len);
    public void readFully(@RUntainted byte[] b);
    public void readFully(@RUntainted byte[] b, int off, int len);
}
