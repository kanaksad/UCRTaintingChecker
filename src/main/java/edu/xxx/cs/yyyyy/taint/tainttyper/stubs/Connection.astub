/*
 * MIT License
 *
 * Copyright (c) 2024 University of California, Riverside
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package java.sql;

import edu.xxx.cs.yyyyy.taint.tainttyper.qual.RUntainted;
import java.util.Properties;
import java.util.concurrent.Executor;

public interface Connection  extends Wrapper, AutoCloseable {

    Statement createStatement() throws SQLException;

    PreparedStatement prepareStatement(@RUntainted String sql)
        throws SQLException;

    CallableStatement prepareCall(@RUntainted String sql) throws SQLException;

    String nativeSQL(String sql) throws SQLException;

    void setAutoCommit(boolean autoCommit) throws SQLException;

    boolean getAutoCommit() throws SQLException;

    void commit() throws SQLException;

    void rollback() throws SQLException;

    void close() throws SQLException;

    boolean isClosed() throws SQLException;

    DatabaseMetaData getMetaData() throws SQLException;

    void setReadOnly(boolean readOnly) throws SQLException;

    boolean isReadOnly() throws SQLException;

    void setCatalog(String catalog) throws SQLException;

    String getCatalog() throws SQLException;

    int TRANSACTION_NONE             = 0;

    int TRANSACTION_READ_UNCOMMITTED = 1;

    int TRANSACTION_READ_COMMITTED   = 2;

    int TRANSACTION_REPEATABLE_READ  = 4;

    int TRANSACTION_SERIALIZABLE     = 8;

    void setTransactionIsolation(int level) throws SQLException;

    int getTransactionIsolation() throws SQLException;

    SQLWarning getWarnings() throws SQLException;

    void clearWarnings() throws SQLException;

    Statement createStatement(int resultSetType, int resultSetConcurrency)
        throws SQLException;

    @RUntainted PreparedStatement prepareStatement(@RUntainted String sql, int resultSetType,
                                       int resultSetConcurrency) throws SQLException;

    @RUntainted CallableStatement prepareCall(@RUntainted String sql, int resultSetType,
                                  int resultSetConcurrency) throws SQLException;

    java.util.Map<String,Class<?>> getTypeMap() throws SQLException;

    void setTypeMap(java.util.Map<String,Class<?>> map) throws SQLException;

    void setHoldability(int holdability) throws SQLException;

    int getHoldability() throws SQLException;

    Savepoint setSavepoint() throws SQLException;

    Savepoint setSavepoint(String name) throws SQLException;

    void rollback(Savepoint savepoint) throws SQLException;

    void releaseSavepoint(Savepoint savepoint) throws SQLException;

    Statement createStatement(int resultSetType, int resultSetConcurrency,
                              int resultSetHoldability) throws SQLException;

    PreparedStatement prepareStatement(@RUntainted String sql, int resultSetType,
                                       int resultSetConcurrency, int resultSetHoldability)
        throws SQLException;

    CallableStatement prepareCall(@RUntainted String sql, int resultSetType,
                                  int resultSetConcurrency,
                                  int resultSetHoldability) throws SQLException;

    @RUntainted PreparedStatement prepareStatement(@RUntainted String sql, int autoGeneratedKeys)
        throws SQLException;

    @RUntainted PreparedStatement prepareStatement(@RUntainted String sql, int columnIndexes[])
        throws SQLException;

    @RUntainted PreparedStatement prepareStatement(@RUntainted String sql, String columnNames[])
        throws SQLException;

    Clob createClob() throws SQLException;

    Blob createBlob() throws SQLException;

    NClob createNClob() throws SQLException;

    SQLXML createSQLXML() throws SQLException;

    boolean isValid(int timeout) throws SQLException;


    void setClientInfo(String name, String value)
                throws SQLClientInfoException;

    void setClientInfo(Properties properties)
                throws SQLClientInfoException;

    String getClientInfo(String name)
                throws SQLException;

     Properties getClientInfo()
                throws SQLException;

 Array createArrayOf(String typeName, Object[] elements) throws
SQLException;

 Struct createStruct(String typeName, Object[] attributes)
throws SQLException;

    void setSchema(String schema) throws SQLException;

    String getSchema() throws SQLException;

    void abort(Executor executor) throws SQLException;

    void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException;


    int getNetworkTimeout() throws SQLException;

    // JDBC 4.3

         default void beginRequest() throws SQLException {
       // Default method takes no action
    }

        default void endRequest() throws SQLException {
            // Default method takes no action
    }

        default boolean setShardingKeyIfValid(ShardingKey shardingKey,
            ShardingKey superShardingKey, int timeout)
            throws SQLException {
        throw new SQLFeatureNotSupportedException("setShardingKeyIfValid not implemented");
    }

        default boolean setShardingKeyIfValid(ShardingKey shardingKey, int timeout)
            throws SQLException {
        throw new SQLFeatureNotSupportedException("setShardingKeyIfValid not implemented");
    }

        default void setShardingKey(ShardingKey shardingKey, ShardingKey superShardingKey)
            throws SQLException {
        throw new SQLFeatureNotSupportedException("setShardingKey not implemented");
    }

        default void setShardingKey(ShardingKey shardingKey)
            throws SQLException {
        throw new SQLFeatureNotSupportedException("setShardingKey not implemented");
    }
}
