/*
 * MIT License
 *
 * Copyright (c) 2024 University of California, Riverside
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package java.nio.file;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.UncheckedIOException;
import java.io.Writer;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.SeekableByteChannel;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.StandardCharsets;
import java.nio.file.attribute.BasicFileAttributeView;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.DosFileAttributes;   // javadoc
import java.nio.file.attribute.FileAttribute;
import java.nio.file.attribute.FileAttributeView;
import java.nio.file.attribute.FileOwnerAttributeView;
import java.nio.file.attribute.FileStoreAttributeView;
import java.nio.file.attribute.FileTime;
import java.nio.file.attribute.PosixFileAttributeView;
import java.nio.file.attribute.PosixFileAttributes;
import java.nio.file.attribute.PosixFilePermission;
import java.nio.file.attribute.UserPrincipal;
import java.nio.file.spi.FileSystemProvider;
import java.nio.file.spi.FileTypeDetector;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.BiPredicate;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import sun.nio.ch.FileChannelImpl;
import sun.nio.fs.AbstractFileSystemProvider;
import edu.xxx.cs.yyyyy.taint.tainttyper.qual.RUntainted;

public static void delete(@RUntainted Path path) throws IOException {
    provider(path).delete(path);
}

public static @RUntainted InputStream newInputStream(@RUntainted Path path, OpenOption... options)
    throws IOException
{
    return provider(path).newInputStream(path, options);
}

public static @RUntainted Path createDirectories(@RUntainted Path dir, FileAttribute<?>... attrs)
    throws IOException
{
    // attempt to create the directory
    try {
        createAndCheckIsDirectory(dir, attrs);
        return dir;
    } catch (FileAlreadyExistsException x) {
        // file exists and is not a directory
        throw x;
    } catch (IOException x) {
        // parent may not exist or other reason
    }
    SecurityException se = null;
    try {
        dir = dir.toAbsolutePath();
    } catch (SecurityException x) {
        // don't have permission to get absolute path
        se = x;
    }
    // find a descendant that exists
    Path parent = dir.getParent();
    while (parent != null) {
        try {
            provider(parent).checkAccess(parent);
            break;
        } catch (NoSuchFileException x) {
            // does not exist
        }
        parent = parent.getParent();
    }
    if (parent == null) {
        // unable to find existing parent
        if (se == null) {
            throw new FileSystemException(dir.toString(), null,
                "Unable to determine if root directory exists");
        } else {
            throw se;
        }
    }

    // create directories
    Path child = parent;
    for (Path name: parent.relativize(dir)) {
        child = child.resolve(name);
        createAndCheckIsDirectory(child, attrs);
    }
    return dir;
}

public static void delete(@RUntainted Path path) throws IOException {
    provider(path).delete(path);
}

public static @RUntainted Path move(@RUntainted Path source, @RUntainted Path target, CopyOption... options)
    throws IOException
{
    FileSystemProvider provider = provider(source);
    if (provider(target) == provider) {
        // same provider
        provider.move(source, target, options);
    } else {
        // different providers
        CopyMoveHelper.moveToForeignTarget(source, target, options);
    }
    return target;
}
