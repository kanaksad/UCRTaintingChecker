import edu.ucr.cs.riple.taint.ucrtainting.qual.RTainted;
import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
import java.io.InputStream;
import java.io.Reader;
import java.io.File;
import org.xml.sax.InputSource;
import java.net.URI;

package java.net;
public class URL {
    public URL(@RUntainted String spec);
    public URL(URL context, @RUntainted String spec);
    public URL(String protocol, @RUntainted String host, String file);
    public URL(URL context, @RUntainted String spec, URLStreamHandler handler);
    public URL(String protocol, @RUntainted String host, int port, String file);
    public URL(String protocol, @RUntainted String host, int port, String file, URLStreamHandler ph);
    public @RTainted URLConnection openConnection();
    public @RTainted java.io.InputStream openStream();
}

package org.springframework.scripting.bsh;
public class BshScriptEvaluator {
    public @RUntainted Object evaluate(@RUntainted ScriptSource script);
    public @RUntainted Object evaluate(@RUntainted ScriptSource script, Map<String,Object> arguments);
}

package org.springframework.core.io;
public interface ResourceLoader {
    Resource @RUntainted getResource(@RUntainted String location);
}

package com.jcraft.jsch;
public class ChannelExec {
    public void setCommand(@RUntainted byte[] command);
    public void setCommand(@RUntainted String command);
}

package jdk.jshell;
public class JShell {
    public List<SnippetEvent> eval(@RUntainted String input);
}

package javax.el;
public abstract class ExpressionFactory {
    public abstract ValueExpression createValueExpression(ELContext context,
                                                      @RUntainted String expression,
                                                      Class<?> expectedType);
}

package org.python.util;
public class PythonInterpreter {
    public @RUntainted PyObject	eval(@RUntainted String s);
    public @RUntainted PyObject eval(@RUntainted PyObject code);
}

package javax.script;
public interface ScriptEngine {
    public @RUntainted Object eval(@RUntainted String script);
}

package jdk.nashorn.api.scripting;
public class NashornScriptEngine {
    public @RUntainted Object eval(@RUntainted String script);
}

package android.webkit;
public class WebResourceResponse {
    public WebResourceResponse(String mimeType, String encoding, @RUntainted InputStream data);
}

package javax.servlet.http;
public interface HttpServletRequest {
    public @RTainted String getHeader(java.lang.String arg0);
    public @RTainted String getMethod();
    public @RTainted String getPathInfo();
    public @RTainted String getPathTranslated();
    public @RTainted String getContextPath();
    public @RTainted String getQueryString();
    public @RTainted String getRemoteUser();
    public @RTainted StringBuffer getRequestURL();
    public @RTainted StringBuffer getRequestURI();
    public @RTainted String getParameter(java.lang.String name);
    public @RTainted java.io.BufferedReader	getReader();
    public @RTainted javax.servlet.ServletInputStream getInputStream();
}

package javax.servlet;
public abstract class ServletOutputStream {
    public void print(@RUntainted boolean s);
    public void print(@RUntainted char s);
    public void print(@RUntainted double s);
    public void print(@RUntainted float s);
    public void print(@RUntainted int s);
    public void print(@RUntainted long s);
    public void print(@RUntainted String s);
    public void println(@RUntainted boolean s);
    public void println(@RUntainted char s);
    public void println(@RUntainted double s);
    public void println(@RUntainted float s);
    public void println(@RUntainted int s);
    public void println(@RUntainted long s);
    public void println(@RUntainted String s);
}

package java.lang;
public final class String {
    public String replaceAll(@RUntainted String regex, String replacement);
}
q
package java.nio.file;
public final class Paths {
    public static @RUntainted Path get(@RUntainted String first, @RUntainted String... more);
    public static @RUntainted Path get(@RUntainted URI uri);
}

public final class Files {
    public static @RUntainted InputStream newInputStream(@RUntainted Path path, OpenOption... options);
    public static @RUntainted OutputStream newOutputStream(@RUntainted Path path, OpenOption... options);
    public static @RUntainted BufferedWriter newBufferedWriter(@RUntainted Path path, OpenOption... options);
    public static @RUntainted byte[] readAllBytes(@RUntainted Path path);
    public static void delete(@RUntainted Path path);
    public static @RUntainted Path copy(@RUntainted Path source, @RUntainted Path target, CopyOption... options);
    public static @RUntainted Path createDirectories(@RUntainted Path dir, FileAttribute<?>... attrs);
    public static @RUntainted Path move(@RUntainted Path source, @RUntainted Path target, CopyOption... options);
}

public class Path {
    public @RUntainted Path resolve(@RUntainted String other);
}

package javax.naming;
public interface Context {
    public Object lookup(@RUntainted String name);
}

package org.xml.sax;
public interface XMLReader {
    public void parse(@RUntainted String systemId);
    public void parse(@RUntainted InputSource systemId);
}


package java.security.cert;
public class CertPathValidator {
    public CertPathValidatorResult validate(@RUntainted CertPath certPath, CertPathParameters params);
}

package java.lang;
public class Thread {
    public static void sleep(@RUntainted long millis);
    public static void sleep(@RUntainted long millis, @RUntainted int nanos);
}

package java.lang;
public abstract class ClassLoader {
    public Class<?>	loadClass(@RUntainted String name);
    public static @RUntainted URL getSystemResource(@RUntainted String name);
    public static @RUntainted URL getSystemResourceAsStream(@RUntainted String name);
}

package java.io;
public class File {
    public File(@RUntainted File parent, @RUntainted String child);
    public File(@RUntainted String pathname);
    public File(@RUntainted String parent, @RUntainted String child);
    public File(@RUntainted URI uri);
}

public abstract class Writer {
    public void write(@RUntainted char[] cbuf);
    public abstract void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
    public void	write(@RUntainted String str);
    public void	write(@RUntainted String str, int off, int len);
}

public class BufferedWriter {
    public void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
    public void	write(@RUntainted String str, int off, int len);
}

public class CharArrayWriter {
    public void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
    public void	write(@RUntainted String str);
}

public class FilterWriter {
    public void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
    public void	write(@RUntainted String str, int off, int len);
}

public class OutputStreamWriter {
    public void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
    public void	write(@RUntainted String str, int off, int len);
}

public class FileWriter {
    public FileWriter(@RUntainted File file);
    public FileWriter(@RUntainted File file, boolean append);
    public FileWriter(@RUntainted String fileName);
    public FileWriter(@RUntainted String fileName, boolean append);
}

public class PipedWriter {
    public void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
}

public class PrintWriter {
    public void write(@RUntainted char[] cbuf);
    public void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
    public void	write(@RUntainted String str);
    public void	write(@RUntainted String str, int off, int len);
}

public class StringWriter {
    public void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
    public void	write(@RUntainted String str);
    public void	write(@RUntainted String str, int off, int len);
}

public class FileOutputStream {
    public void write(@RUntainted byte[] b);
    public void	write(@RUntainted byte[] b, int off, int len);
    public void	write(@RUntainted int b);
}

public class OutputStreamWriter {
    public void write(@RUntainted char[] cbuf, int off, int len);
    public void	write(@RUntainted int c);
    public void	write(@RUntainted String str, int off, int len);
}

package javax.xml.stream;
public abstract class XMLInputFactory {
    public abstract XMLStreamReader createXMLStreamReader(@RUntainted String systemId, java.io.@RUntainted InputStream stream)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLStreamReader(@RUntainted String systemId, java.io.@RUntainted Reader reader)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLStreamReader(java.io.@RUntainted Reader reader)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLStreamReader(@RUntainted Source source)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLStreamReader(java.io.@RUntainted InputStream stream)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLStreamReader(java.io.@RUntainted InputStream stream, @RUntainted String encoding)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLEventReader(@RUntainted String systemId, java.io.@RUntainted InputStream stream)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLEventReader(@RUntainted String systemId, java.io.@RUntainted Reader reader)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLEventReader(java.io.@RUntainted Reader reader)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLEventReader(@RUntainted Source source)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLEventReader(java.io.@RUntainted InputStream stream)
    throws XMLStreamException;
    public abstract XMLStreamReader createXMLEventReader(java.io.@RUntainted InputStream stream, @RUntainted String encoding)
    throws XMLStreamException;
}

package javax.xml.xquery;
public interface XQConnection {
    public XQPreparedExpression prepareExpression(@RUntainted InputStream xquery);
    public XQPreparedExpression	prepareExpression(@RUntainted InputStream xquery, XQStaticContext properties);
    public XQPreparedExpression	prepareExpression(@RUntainted Reader xquery);
    public XQPreparedExpression	prepareExpression(@RUntainted Reader xquery, XQStaticContext properties);
    public XQPreparedExpression	prepareExpression(@RUntainted String xquery);
    public XQPreparedExpression	prepareExpression(@RUntainted String xquery, XQStaticContext properties);
}

public interface XQExpression {
    public void	executeCommand(@RUntainted Reader cmd);
    public void	executeCommand(@RUntainted String cmd);
    public XQResultSequence	executeQuery(@RUntainted InputStream query);
    public XQResultSequence	executeQuery(@RUntainted Reader query);
    public XQResultSequence	executeQuery(@RUntainted String query);
}

package javax.xml.parsers;
public abstract class SAXParser {
    public void	parse(@RUntainted File f, DefaultHandler dh);
    public void	parse(@RUntainted File f, HandlerBase hb);
    public void	parse(@RUntainted InputSource is, DefaultHandler dh);
    public void	parse(@RUntainted InputSource is, HandlerBase hb);
    public void	parse(@RUntainted InputStream is, DefaultHandler dh);
    public void	parse(@RUntainted InputStream is, DefaultHandler dh, String systemId);
    public void	parse(@RUntainted InputStream is, HandlerBase hb);
    public void	parse(@RUntainted InputStream is, HandlerBase hb, String systemId);
    public void	parse(@RUntainted String uri, DefaultHandler dh);
    public void	parse(@RUntainted String uri, HandlerBase hb);
}

package java.xml.xpath;
public class XPath {
    public @RUntainted String evaluate(@RUntainted String expression, @RUntainted InputSource source);
    public @RUntainted Object evaluate(@RUntainted String expression, @RUntainted InputSource source, javax.xml.namespace.@RUntainted QName returnType);
    public @RUntainted Object evaluate(@RUntainted String expression, @RUntainted Object item, javax.xml.namespace.@RUntainted QName returnType);
}

public abstract class DocumentBuilder {
    public Document	parse(@RUntainted File f);
    public abstract Document parse(@RUntainted InputSource is);
    public Document	parse(@RUntainted InputStream is);
    public Document	parse(@RUntainted InputStream is, String systemId);
    public Document	parse(@RUntainted String uri);
}

package org.apache.commons.jexl2;
public interface Expression {
    public Object evaluate(@RUntainted JexlContext context);
}