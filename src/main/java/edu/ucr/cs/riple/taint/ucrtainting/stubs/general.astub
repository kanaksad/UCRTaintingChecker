/*
 * MIT License
 *
 * Copyright (c) 2024 University of California, Riverside
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;

package javax.servlet;

public class ServletResponse {
	public void setContentType(@RUntainted String type);
	public void setCharacterEncoding(@RUntainted String charset);
}

package javax.servlet.http;
public class HttpServletResponse {
	public void setDateHeader(@RUntainted String name, long date);
	public void setHeader(@RUntainted String name, String value);
	public void sendError(int sc, @RUntainted String msg) throws IOException;
	public void addIntHeader(@RUntainted String name, int value);
	public void sendRedirect(@RUntainted String location) throws IOException;
	public void sendError(int sc) throws IOException;
	public void addDateHeader(@RUntainted String name, long date);
	public void addHeader(@RUntainted String name, @RUntainted String value);
	public void setIntHeader(@RUntainted String name, int value);
	public void addCookie(@RUntainted Cookie cookie);
}

package javax.mail.internet;
public class InternetAddress {
	public static InternetAddress[] parse(@RUntainted String addresslist) throws AddressException;
	public static InternetAddress[] parse(@RUntainted String addresslist, boolean strict) throws AddressException;
}

package java.sql;
public class Connection {
	@RUntainted CallableStatement prepareCall(@RUntainted String sql, int resultSetType, int resultSetConcurrency) throws SQLException;
	@RUntainted PreparedStatement prepareStatement(@RUntainted String sql, int autoGeneratedKeys) throws SQLException;
	@RUntainted PreparedStatement prepareStatement(@RUntainted String sql, int columnIndexes[]) throws SQLException;
	@RUntainted PreparedStatement prepareStatement(@RUntainted String sql) throws SQLException;
	@RUntainted CallableStatement prepareCall(@RUntainted String sql) throws SQLException;
	@RUntainted CallableStatement prepareCall(@RUntainted String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
	@RUntainted PreparedStatement prepareStatement(@RUntainted String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
	@RUntainted PreparedStatement prepareStatement(@RUntainted String sql, String columnNames[]) throws SQLException;
	@RUntainted PreparedStatement prepareStatement(@RUntainted String sql, int resultSetType, int resultSetConcurrency) throws SQLException;
}

public class DriverManager {
	public static @RUntainted Connection getConnection(@RUntainted String url) throws SQLException;
	public static @RUntainted Connection getConnection(@RUntainted String url, @RUntainted String user, @RUntainted String password) throws SQLException;
	public static @RUntainted Connection getConnection(@RUntainted String url, @RUntainted java.util.Properties info) throws SQLException;
}


package java.lang;
public class System {
	public static void load(@RUntainted String filename);
	public static void loadLibrary(@RUntainted String libname);
}

public class ProcessBuilder {
	public ProcessBuilder(List<@RUntainted String> command);
	public ProcessBuilder(@RUntainted String... command);
	public ProcessBuilder command(List<@RUntainted String> command);
	public ProcessBuilder command(@RUntainted String... command);
	public @RUntainted List<@RUntainted String> command();
}

public class Runtime {
	public @RUntainted Process exec(@RUntainted String command, @RUntainted String[] envp, @RUntainted File dir) throws IOException;
	public @RUntainted Process exec(@RUntainted String[] cmdarray, @RUntainted String[] envp) throws IOException;
	public @RUntainted Process exec(@RUntainted String[] cmdarray, @RUntainted String[] envp, @RUntainted File dir) throws IOException;
	public @RUntainted Process exec(@RUntainted String command) throws IOException;
	public @RUntainted Process exec(@RUntainted String command, @RUntainted String[] envp) throws IOException;
	public @RUntainted Process exec(@RUntainted String cmdarray[]) throws IOException;
}

public class Thread {
	public static void sleep(long millis, int nanos) throws InterruptedException;
	public static native void sleep(long millis) throws InterruptedException;
}
/*
public class Class {
	public static @RUntainted Class forName(@RUntainted Module module, @RUntainted String name);
	public @RUntainted URL getResource(@RUntainted String name);
	public @RUntainted Field getField(@RUntainted String name) throws NoSuchFieldException, SecurityException;
	public @RUntainted Field getDeclaredField(@RUntainted String name) throws NoSuchFieldException, SecurityException;
	public static @RUntainted Class forName(@RUntainted String className) throws ClassNotFoundException;
	public @RUntainted Method getDeclaredMethod(@RUntainted String name, @RUntainted Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException;
	public @RUntainted InputStream getResourceAsStream(@RUntainted String name);
	public @RUntainted Method getMethod(@RUntainted String name, @RUntainted Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException;
	public static @RUntainted Class forName(@RUntainted String name, boolean initialize, @RUntainted ClassLoader loader) throws ClassNotFoundException;
}
*/
package javax.persistence;
public class EntityManager {
	public @RUntainted Query createQuery(@RUntainted CriteriaDelete deleteQuery);
	public @RUntainted Query createNativeQuery(@RUntainted String sqlString);
	public @RUntainted Query createNativeQuery(@RUntainted String sqlString, @RUntainted Class resultClass);
	public @RUntainted TypedQuery createQuery(@RUntainted CriteriaQuery criteriaQuery);
	public @RUntainted Query createNativeQuery(@RUntainted String sqlString, @RUntainted String resultSetMapping);
	public @RUntainted TypedQuery createQuery(@RUntainted String qlString, @RUntainted Class resultClass);
	public @RUntainted Query createQuery(@RUntainted CriteriaUpdate updateQuery);
	public @RUntainted Query createQuery(@RUntainted String qlString);
}

package java.lang;

public final class Class<T> {
    public @RUntainted String getName();
}
