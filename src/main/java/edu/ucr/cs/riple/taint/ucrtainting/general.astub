import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package javax.servlet.http;
public class HttpSession {
	public void setAttribute(@RUntainted String name, @RUntainted Object value);
	public void putValue(String name, Object value);
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package javax.mail.internet;
public class InternetAddress {
	public static InternetAddress[] parse(@RUntainted String addresslist) throws AddressException;
	public static InternetAddress[] parse(@RUntainted String addresslist, boolean strict) throws AddressException;
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package java.sql;
public class Connection {
	CallableStatement prepareCall(@RUntainted String sql, int resultSetType, int resultSetConcurrency) throws SQLException;
	PreparedStatement prepareStatement(@RUntainted String sql, int autoGeneratedKeys) throws SQLException;
	PreparedStatement prepareStatement(@RUntainted String sql, int columnIndexes[]) throws SQLException;
	PreparedStatement prepareStatement(@RUntainted String sql) throws SQLException;
	CallableStatement prepareCall(@RUntainted String sql) throws SQLException;
	CallableStatement prepareCall(@RUntainted String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
	PreparedStatement prepareStatement(@RUntainted String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException;
	PreparedStatement prepareStatement(@RUntainted String sql, String columnNames[]) throws SQLException;
	PreparedStatement prepareStatement(@RUntainted String sql, int resultSetType, int resultSetConcurrency) throws SQLException;
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package javax.servlet;
public class ServletResponse {
	public void setContentType(@RUntainted String type);
	public void setCharacterEncoding(@RUntainted String charset);
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package java.lang;
public class System {
	public static void load(@RUntainted String filename);
	public static void loadLibrary(@RUntainted String libname);
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package java.lang;
public class Runtime {
	public Process exec(@RUntainted String command, @RUntainted String[] envp, @RUntainted File dir) throws IOException;
	public Process exec(@RUntainted String[] cmdarray, @RUntainted String[] envp) throws IOException;
	public Process exec(@RUntainted String[] cmdarray, @RUntainted String[] envp, @RUntainted File dir) throws IOException;
	public Process exec(@RUntainted String command) throws IOException;
	public Process exec(@RUntainted String command, @RUntainted String[] envp) throws IOException;
	public Process exec(@RUntainted String cmdarray[]) throws IOException;
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package java.lang;
public class Thread {
	public static void sleep(long millis, int nanos) throws InterruptedException;
	public static native void sleep(long millis) throws InterruptedException;
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package javax.servlet.http;
public class HttpServletResponse {
	public void setDateHeader(@RUntainted String name, long date);
	public void setHeader(@RUntainted String name, String value);
	public void sendError(int sc, @RUntainted String msg) throws IOException;
	public void addIntHeader(@RUntainted String name, int value);
	public void sendRedirect(@RUntainted String location) throws IOException;
	public void sendError(int sc) throws IOException;
	public void addDateHeader(@RUntainted String name, long date);
	public void addHeader(@RUntainted String name, @RUntainted String value);
	public void setIntHeader(@RUntainted String name, int value);
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package java.lang;
public class Class {
	public static Class forName(@RUntainted Module module, @RUntainted String name);
	public URL getResource(@RUntainted String name);
	public Field getField(@RUntainted String name) throws NoSuchFieldException, SecurityException;
	public Field getDeclaredField(@RUntainted String name) throws NoSuchFieldException, SecurityException;
	public static Class forName(@RUntainted String className) throws ClassNotFoundException;
	public Method getDeclaredMethod(@RUntainted String name, @RUntainted Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException;
	public InputStream getResourceAsStream(@RUntainted String name);
	public Method getMethod(@RUntainted String name, @RUntainted Class<?>... parameterTypes) throws NoSuchMethodException, SecurityException;
	public static Class forName(@RUntainted String name, boolean initialize, @RUntainted ClassLoader loader) throws ClassNotFoundException;
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package javax.persistence;
public class EntityManager {
	public Query createQuery(@RUntainted CriteriaDelete deleteQuery);
	public Query createNativeQuery(@RUntainted String sqlString);
	public Query createNativeQuery(@RUntainted String sqlString, @RUntainted Class resultClass);
	public TypedQuery createQuery(@RUntainted CriteriaQuery criteriaQuery);
	public Query createNativeQuery(@RUntainted String sqlString, @RUntainted String resultSetMapping);
	public TypedQuery createQuery(@RUntainted String qlString, @RUntainted Class resultClass);
	public Query createQuery(@RUntainted CriteriaUpdate updateQuery);
	public Query createQuery(@RUntainted String qlString);
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package javax.servlet.http;
public class Cookie {
	public void setPath(@RUntainted String uri);
	public void setDomain(@RUntainted String domain);
	public void setComment(@RUntainted String purpose);
	public void setValue(@RUntainted String newValue);
}

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
package java.sql;
public class DriverManager {
	public static Connection getConnection(@RUntainted String url) throws SQLException;
	public static Connection getConnection(@RUntainted String url, @RUntainted String user, @RUntainted String password) throws SQLException;
	public static Connection getConnection(@RUntainted String url, @RUntainted java.util.Properties info) throws SQLException;
}
