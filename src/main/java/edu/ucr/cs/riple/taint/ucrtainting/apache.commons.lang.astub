package org.apache.commons.lang3;

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
public class ClassUtils {
	/**
	 * Returns the class represented by {@code className} using the current thread's context class loader. This
	 * implementation supports the syntaxes "{@code java.util.Map.Entry[]}", "{@code java.util.Map$Entry[]}",
	 * "{@code [Ljava.util.Map.Entry;}", and "{@code [Ljava.util.Map$Entry;}".
	 *
	 * @param className the class name
	 * @param initialize whether the class must be initialized
	 * @return the class represented by {@code className} using the current thread's context class loader
	 * @throws NullPointerException if the className is null
	 * @throws ClassNotFoundException if the class is not found
	 */
	public static Class<?> getClass(@RUntainted final String className, final boolean initialize) throws ClassNotFoundException {
	    final ClassLoader contextCL = Thread.currentThread().getContextClassLoader();
	    final ClassLoader loader = contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;
	    return getClass(loader, className, initialize);
	}

	/**
	 * Returns the (initialized) class represented by {@code className} using the current thread's context class loader.
	 * This implementation supports the syntaxes "{@code java.util.Map.Entry[]}", "{@code java.util.Map$Entry[]}",
	 * "{@code [Ljava.util.Map.Entry;}", and "{@code [Ljava.util.Map$Entry;}".
	 *
	 * @param className the class name
	 * @return the class represented by {@code className} using the current thread's context class loader
	 * @throws NullPointerException if the className is null
	 * @throws ClassNotFoundException if the class is not found
	 */
	public static Class<?> getClass(@RUntainted final String className) throws ClassNotFoundException {
	    return getClass(className, true);
	}

	/**
	 * Returns the (initialized) class represented by {@code className} using the {@code classLoader}. This implementation
	 * supports the syntaxes "{@code java.util.Map.Entry[]}", "{@code java.util.Map$Entry[]}",
	 * "{@code [Ljava.util.Map.Entry;}", and "{@code [Ljava.util.Map$Entry;}".
	 *
	 * @param classLoader the class loader to use to load the class
	 * @param className the class name
	 * @return the class represented by {@code className} using the {@code classLoader}
	 * @throws NullPointerException if the className is null
	 * @throws ClassNotFoundException if the class is not found
	 */
	public static Class<?> getClass(@RUntainted final ClassLoader classLoader, @RUntainted final String className) throws ClassNotFoundException {
	    return getClass(classLoader, className, true);
	}

	/**
	 * Returns the class represented by {@code className} using the {@code classLoader}. This implementation supports the
	 * syntaxes "{@code java.util.Map.Entry[]}", "{@code java.util.Map$Entry[]}", "{@code [Ljava.util.Map.Entry;}", and
	 * "{@code [Ljava.util.Map$Entry;}".
	 *
	 * @param classLoader the class loader to use to load the class
	 * @param className the class name
	 * @param initialize whether the class must be initialized
	 * @return the class represented by {@code className} using the {@code classLoader}
	 * @throws NullPointerException if the className is null
	 * @throws ClassNotFoundException if the class is not found
	 */
	public static Class<?> getClass(@RUntainted final ClassLoader classLoader, @RUntainted final String className, final boolean initialize) throws ClassNotFoundException {
	    try {
	        final Class<?> clazz;
	        if (namePrimitiveMap.containsKey(className)) {
	            clazz = namePrimitiveMap.get(className);
	        } else {
	            clazz = Class.forName(toCanonicalName(className), initialize, classLoader);
	        }
	        return clazz;
	    } catch (final ClassNotFoundException ex) {
	        // allow path separators (.) as inner class name separators
	        final int lastDotIndex = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);
	        if (lastDotIndex != -1) {
	            try {
	                return getClass(classLoader, className.substring(0, lastDotIndex) + INNER_CLASS_SEPARATOR_CHAR + className.substring(lastDotIndex + 1), initialize);
	            } catch (final ClassNotFoundException ignored) {
	                // ignore exception
	            }
	        }
	        throw ex;
	    }
	}

	/**
	 * Returns the desired Method much like {@code Class.getMethod}, however it ensures that the returned Method is from a
	 * public class or interface and not from an anonymous inner class. This means that the Method is invokable and doesn't
	 * fall foul of Java bug <a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4071957">4071957</a>).
	 *
	 * <pre>
	 *  <code>Set set = Collections.unmodifiableSet(...);
	 *  Method method = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]);
	 *  Object result = method.invoke(set, new Object[]);</code>
	 * </pre>
	 *
	 * @param cls the class to check, not null
	 * @param methodName the name of the method
	 * @param parameterTypes the list of parameters
	 * @return the method
	 * @throws NullPointerException if the class is null
	 * @throws SecurityException if a security violation occurred
	 * @throws NoSuchMethodException if the method is not found in the given class or if the method doesn't conform with the
	 *         requirements
	 */
	public static Method getPublicMethod(@RUntainted final Class<?> cls, @RUntainted final String methodName, @RUntainted final Class<?>... parameterTypes) throws NoSuchMethodException {
	    final Method declaredMethod = cls.getMethod(methodName, parameterTypes);
	    if (isPublic(declaredMethod.getDeclaringClass())) {
	        return declaredMethod;
	    }
	    final List<Class<?>> candidateClasses = new ArrayList<>(getAllInterfaces(cls));
	    candidateClasses.addAll(getAllSuperclasses(cls));
	    for (final Class<?> candidateClass : candidateClasses) {
	        if (!isPublic(candidateClass)) {
	            continue;
	        }
	        final Method candidateMethod;
	        try {
	            candidateMethod = candidateClass.getMethod(methodName, parameterTypes);
	        } catch (final NoSuchMethodException ex) {
	            continue;
	        }
	        if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {
	            return candidateMethod;
	        }
	    }
	    throw new NoSuchMethodException("Can't find a public method for " + methodName + " " + ArrayUtils.toString(parameterTypes));
	}

}
package org.apache.commons.lang3.reflect;

import edu.ucr.cs.riple.taint.ucrtainting.qual.RUntainted;
public class MethodUtils {
	/**
	 * Finds an accessible method that matches the given name and has compatible parameters.
	 * Compatible parameters mean that every method parameter is assignable from
	 * the given parameters.
	 * In other words, it finds a method with the given name
	 * that will take the parameters given.
	 *
	 * <p>This method is used by
	 * {@link
	 * #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}.
	 * </p>
	 *
	 * <p>This method can match primitive parameter by passing in wrapper classes.
	 * For example, a {@link Boolean} will match a primitive {@code boolean}
	 * parameter.
	 * </p>
	 *
	 * @param cls find method in this class
	 * @param methodName find method with this name
	 * @param parameterTypes find method with most compatible parameters
	 * @return The accessible method
	 */
	public static Method getMatchingAccessibleMethod(@RUntainted final Class<?> cls, @RUntainted final String methodName, @RUntainted final Class<?>... parameterTypes) {
	    try {
	        return MemberUtils.setAccessibleWorkaround(cls.getMethod(methodName, parameterTypes));
	    } catch (final NoSuchMethodException ignored) {
	        // Swallow the exception
	    }
	    // search through all methods
	    final Method[] methods = cls.getMethods();
	    final List<Method> matchingMethods = Stream.of(methods).filter(method -> method.getName().equals(methodName) && MemberUtils.isMatchingMethod(method, parameterTypes)).collect(Collectors.toList());
	    // Sort methods by signature to force deterministic result
	    matchingMethods.sort(METHOD_BY_SIGNATURE);
	    Method bestMatch = null;
	    for (final Method method : matchingMethods) {
	        // get accessible version of method
	        final Method accessibleMethod = getAccessibleMethod(method);
	        if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareMethodFit(accessibleMethod, bestMatch, parameterTypes) < 0)) {
	            bestMatch = accessibleMethod;
	        }
	    }
	    if (bestMatch != null) {
	        MemberUtils.setAccessibleWorkaround(bestMatch);
	    }
	    if (bestMatch != null && bestMatch.isVarArgs() && bestMatch.getParameterTypes().length > 0 && parameterTypes.length > 0) {
	        final Class<?>[] methodParameterTypes = bestMatch.getParameterTypes();
	        final Class<?> methodParameterComponentType = methodParameterTypes[methodParameterTypes.length - 1].getComponentType();
	        final String methodParameterComponentTypeName = ClassUtils.primitiveToWrapper(methodParameterComponentType).getName();
	        final Class<?> lastParameterType = parameterTypes[parameterTypes.length - 1];
	        final String parameterTypeName = lastParameterType == null ? null : lastParameterType.getName();
	        final String parameterTypeSuperClassName = lastParameterType == null ? null : lastParameterType.getSuperclass().getName();
	        if (parameterTypeName != null && parameterTypeSuperClassName != null && !methodParameterComponentTypeName.equals(parameterTypeName) && !methodParameterComponentTypeName.equals(parameterTypeSuperClassName)) {
	            return null;
	        }
	    }
	    return bestMatch;
	}

	/**
	 * Invokes a named method whose parameter type matches the object type.
	 *
	 * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>
	 *
	 * <p>This method supports calls to methods taking primitive parameters
	 * via passing in wrapping classes. So, for example, a {@link Boolean} object
	 * would match a {@code boolean} primitive.</p>
	 *
	 * <p>This is a convenient wrapper for
	 * {@link #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}.
	 * </p>
	 *
	 * @param object invoke method on this object
	 * @param methodName get method with this name
	 * @param args use these arguments - treat null as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the method invoked
	 * @throws IllegalAccessException if the requested method is not accessible via reflection
	 */
	public static Object invokeMethod(@RUntainted final Object object, @RUntainted final String methodName, @RUntainted Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    args = ArrayUtils.nullToEmpty(args);
	    return invokeMethod(object, methodName, args, ClassUtils.toClass(args));
	}

	/**
	 * Invokes a named method whose parameter type matches the object type.
	 *
	 * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>
	 *
	 * <p>This method supports calls to methods taking primitive parameters
	 * via passing in wrapping classes. So, for example, a {@link Boolean} object
	 * would match a {@code boolean} primitive.</p>
	 *
	 * @param object invoke method on this object
	 * @param methodName get method with this name
	 * @param args use these arguments - treat null as empty array
	 * @param parameterTypes match these parameters - treat null as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the method invoked
	 * @throws IllegalAccessException if the requested method is not accessible via reflection
	 */
	public static Object invokeMethod(@RUntainted final Object object, @RUntainted final String methodName, @RUntainted final Object[] args, @RUntainted final Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    return invokeMethod(object, false, methodName, args, parameterTypes);
	}

	/**
	 * Invokes a named {@code static} method whose parameter type matches the object type.
	 *
	 * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>
	 *
	 * <p>This method supports calls to methods taking primitive parameters
	 * via passing in wrapping classes. So, for example, a {@link Boolean} class
	 * would match a {@code boolean} primitive.</p>
	 *
	 * @param cls invoke static method on this class
	 * @param methodName get method with this name
	 * @param args use these arguments - treat {@code null} as empty array
	 * @param parameterTypes match these parameters - treat {@code null} as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the
	 *  method invoked
	 * @throws IllegalAccessException if the requested method is not accessible
	 *  via reflection
	 */
	public static Object invokeStaticMethod(@RUntainted final Class<?> cls, @RUntainted final String methodName, @RUntainted Object[] args, @RUntainted Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    args = ArrayUtils.nullToEmpty(args);
	    parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);
	    final Method method = getMatchingAccessibleMethod(cls, methodName, parameterTypes);
	    if (method == null) {
	        throw new NoSuchMethodException("No such accessible method: " + methodName + "() on class: " + cls.getName());
	    }
	    args = toVarArgs(method, args);
	    return method.invoke(null, args);
	}

	/**
	 * Invokes a named method without parameters.
	 *
	 * <p>This is a convenient wrapper for
	 * {@link #invokeMethod(Object object, boolean forceAccess, String methodName, Object[] args, Class[] parameterTypes)}.
	 * </p>
	 *
	 * @param object invoke method on this object
	 * @param forceAccess force access to invoke method even if it's not accessible
	 * @param methodName get method with this name
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the method invoked
	 * @throws IllegalAccessException if the requested method is not accessible via reflection
	 *
	 * @since 3.5
	 */
	public static Object invokeMethod(@RUntainted final Object object, final boolean forceAccess, @RUntainted final String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    return invokeMethod(object, forceAccess, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY, null);
	}

	/**
	 * Invokes a named method without parameters.
	 *
	 * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>
	 *
	 * <p>This is a convenient wrapper for
	 * {@link #invokeMethod(Object object, String methodName, Object[] args, Class[] parameterTypes)}.
	 * </p>
	 *
	 * @param object invoke method on this object
	 * @param methodName get method with this name
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the method invoked
	 * @throws IllegalAccessException if the requested method is not accessible via reflection
	 *
	 *  @since 3.4
	 */
	public static Object invokeMethod(@RUntainted final Object object, @RUntainted final String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    return invokeMethod(object, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY, null);
	}

	/**
	 * Returns an accessible method (that is, one that can be invoked via
	 * reflection) that implements the specified Method. If no such method
	 * can be found, return {@code null}.
	 *
	 * @param method The method that we wish to call
	 * @return The accessible method
	 */
	public static Method getAccessibleMethod(@RUntainted Method method) {
	    if (!MemberUtils.isAccessible(method)) {
	        return null;
	    }
	    // If the declaring class is public, we are done
	    final Class<?> cls = method.getDeclaringClass();
	    if (ClassUtils.isPublic(cls)) {
	        return method;
	    }
	    final String methodName = method.getName();
	    final Class<?>[] parameterTypes = method.getParameterTypes();
	    // Check the implemented interfaces and subinterfaces
	    method = getAccessibleMethodFromInterfaceNest(cls, methodName, parameterTypes);
	    // Check the superclass chain
	    if (method == null) {
	        method = getAccessibleMethodFromSuperclass(cls, methodName, parameterTypes);
	    }
	    return method;
	}

	/**
	 * Invokes a named method whose parameter type matches the object type.
	 *
	 * <p>This method supports calls to methods taking primitive parameters
	 * via passing in wrapping classes. So, for example, a {@link Boolean} object
	 * would match a {@code boolean} primitive.</p>
	 *
	 * <p>This is a convenient wrapper for
	 * {@link #invokeMethod(Object object, boolean forceAccess, String methodName, Object[] args, Class[] parameterTypes)}.
	 * </p>
	 *
	 * @param object invoke method on this object
	 * @param forceAccess force access to invoke method even if it's not accessible
	 * @param methodName get method with this name
	 * @param args use these arguments - treat null as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the method invoked
	 * @throws IllegalAccessException if the requested method is not accessible via reflection
	 *
	 * @since 3.5
	 */
	public static Object invokeMethod(@RUntainted final Object object, final boolean forceAccess, @RUntainted final String methodName, @RUntainted Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    args = ArrayUtils.nullToEmpty(args);
	    return invokeMethod(object, forceAccess, methodName, args, ClassUtils.toClass(args));
	}

	/**
	 * Invokes a named method whose parameter type matches the object type.
	 *
	 * <p>This method supports calls to methods taking primitive parameters
	 * via passing in wrapping classes. So, for example, a {@link Boolean} object
	 * would match a {@code boolean} primitive.</p>
	 *
	 * @param object invoke method on this object
	 * @param forceAccess force access to invoke method even if it's not accessible
	 * @param methodName get method with this name
	 * @param args use these arguments - treat null as empty array
	 * @param parameterTypes match these parameters - treat null as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the method invoked
	 * @throws IllegalAccessException if the requested method is not accessible via reflection
	 * @since 3.5
	 */
	public static Object invokeMethod(@RUntainted final Object object, final boolean forceAccess, @RUntainted final String methodName, @RUntainted Object[] args, @RUntainted Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    Objects.requireNonNull(object, "object");
	    parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);
	    args = ArrayUtils.nullToEmpty(args);
	    final String messagePrefix;
	    final Method method;
	    final Class<? extends Object> cls = object.getClass();
	    if (forceAccess) {
	        messagePrefix = "No such method: ";
	        method = getMatchingMethod(cls, methodName, parameterTypes);
	        if (method != null && !method.isAccessible()) {
	            method.setAccessible(true);
	        }
	    } else {
	        messagePrefix = "No such accessible method: ";
	        method = getMatchingAccessibleMethod(cls, methodName, parameterTypes);
	    }
	    if (method == null) {
	        throw new NoSuchMethodException(messagePrefix + methodName + "() on object: " + cls.getName());
	    }
	    args = toVarArgs(method, args);
	    return method.invoke(object, args);
	}

	/**
	 * Retrieves a method whether or not it's accessible. If no such method
	 * can be found, return {@code null}.
	 * @param cls The class that will be subjected to the method search
	 * @param methodName The method that we wish to call
	 * @param parameterTypes Argument class types
	 * @throws IllegalStateException if there is no unique result
	 * @return The method
	 *
	 * @since 3.5
	 */
	public static Method getMatchingMethod(@RUntainted final Class<?> cls, @RUntainted final String methodName, @RUntainted final Class<?>... parameterTypes) {
	    Objects.requireNonNull(cls, "cls");
	    Validate.notEmpty(methodName, "methodName");
	    final List<Method> methods = Stream.of(cls.getDeclaredMethods()).filter(method -> method.getName().equals(methodName)).collect(Collectors.toList());
	    ClassUtils.getAllSuperclasses(cls).stream().map(Class::getDeclaredMethods).flatMap(Stream::of).filter(method -> method.getName().equals(methodName)).forEach(methods::add);
	    for (final Method method : methods) {
	        if (Arrays.deepEquals(method.getParameterTypes(), parameterTypes)) {
	            return method;
	        }
	    }
	    final TreeMap<Integer, List<Method>> candidates = new TreeMap<>();
	    methods.stream().filter(method -> ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)).forEach(method -> {
	        final int distance = distance(parameterTypes, method.getParameterTypes());
	        final List<Method> candidatesAtDistance = candidates.computeIfAbsent(distance, k -> new ArrayList<>());
	        candidatesAtDistance.add(method);
	    });
	    if (candidates.isEmpty()) {
	        return null;
	    }
	    final List<Method> bestCandidates = candidates.values().iterator().next();
	    if (bestCandidates.size() == 1) {
	        return bestCandidates.get(0);
	    }
	    throw new IllegalStateException(String.format("Found multiple candidates for method %s on class %s : %s", methodName + Stream.of(parameterTypes).map(String::valueOf).collect(Collectors.joining(",", "(", ")")), cls.getName(), bestCandidates.stream().map(Method::toString).collect(Collectors.joining(",", "[", "]"))));
	}

	/**
	 * Invokes a {@code static} method whose parameter types match exactly the parameter
	 * types given.
	 *
	 * <p>This uses reflection to invoke the method obtained from a call to
	 * {@link #getAccessibleMethod(Class, String, Class[])}.</p>
	 *
	 * @param cls invoke static method on this class
	 * @param methodName get method with this name
	 * @param args use these arguments - treat {@code null} as empty array
	 * @param parameterTypes match these parameters - treat {@code null} as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the
	 *  method invoked
	 * @throws IllegalAccessException if the requested method is not accessible
	 *  via reflection
	 */
	public static Object invokeExactStaticMethod(@RUntainted final Class<?> cls, @RUntainted final String methodName, @RUntainted Object[] args, @RUntainted Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    args = ArrayUtils.nullToEmpty(args);
	    parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);
	    final Method method = getAccessibleMethod(cls, methodName, parameterTypes);
	    if (method == null) {
	        throw new NoSuchMethodException("No such accessible method: " + methodName + "() on class: " + cls.getName());
	    }
	    return method.invoke(null, args);
	}

	/**
	 * Invokes a {@code static} method whose parameter types match exactly the object
	 * types.
	 *
	 * <p>This uses reflection to invoke the method obtained from a call to
	 * {@link #getAccessibleMethod(Class, String, Class[])}.</p>
	 *
	 * @param cls invoke static method on this class
	 * @param methodName get method with this name
	 * @param args use these arguments - treat {@code null} as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the
	 *  method invoked
	 * @throws IllegalAccessException if the requested method is not accessible
	 *  via reflection
	 */
	public static Object invokeExactStaticMethod(@RUntainted final Class<?> cls, @RUntainted final String methodName, @RUntainted Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    args = ArrayUtils.nullToEmpty(args);
	    return invokeExactStaticMethod(cls, methodName, args, ClassUtils.toClass(args));
	}

	/**
	 * Invokes a method whose parameter types match exactly the object
	 * types.
	 *
	 * <p>This uses reflection to invoke the method obtained from a call to
	 * {@link #getAccessibleMethod}(Class, String, Class[])}.</p>
	 *
	 * @param object invoke method on this object
	 * @param methodName get method with this name
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the
	 *  method invoked
	 * @throws IllegalAccessException if the requested method is not accessible
	 *  via reflection
	 *
	 * @since 3.4
	 */
	public static Object invokeExactMethod(@RUntainted final Object object, @RUntainted final String methodName) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    return invokeExactMethod(object, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY, null);
	}

	/**
	 * Invokes a named {@code static} method whose parameter type matches the object type.
	 *
	 * <p>This method delegates the method search to {@link #getMatchingAccessibleMethod(Class, String, Class[])}.</p>
	 *
	 * <p>This method supports calls to methods taking primitive parameters
	 * via passing in wrapping classes. So, for example, a {@link Boolean} class
	 * would match a {@code boolean} primitive.</p>
	 *
	 * <p>This is a convenient wrapper for
	 * {@link #invokeStaticMethod(Class, String, Object[], Class[])}.
	 * </p>
	 *
	 * @param cls invoke static method on this class
	 * @param methodName get method with this name
	 * @param args use these arguments - treat {@code null} as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the
	 *  method invoked
	 * @throws IllegalAccessException if the requested method is not accessible
	 *  via reflection
	 */
	public static Object invokeStaticMethod(@RUntainted final Class<?> cls, @RUntainted final String methodName, @RUntainted Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    args = ArrayUtils.nullToEmpty(args);
	    return invokeStaticMethod(cls, methodName, args, ClassUtils.toClass(args));
	}

	/**
	 * Returns an accessible method (that is, one that can be invoked via
	 * reflection) with given name and parameters. If no such method
	 * can be found, return {@code null}.
	 * This is just a convenience wrapper for
	 * {@link #getAccessibleMethod(Method)}.
	 *
	 * @param cls get method from this class
	 * @param methodName get method with this name
	 * @param parameterTypes with these parameters types
	 * @return The accessible method
	 */
	public static Method getAccessibleMethod(@RUntainted final Class<?> cls, @RUntainted final String methodName, @RUntainted final Class<?>... parameterTypes) {
	    try {
	        return getAccessibleMethod(cls.getMethod(methodName, parameterTypes));
	    } catch (final NoSuchMethodException e) {
	        return null;
	    }
	}

	/**
	 * Invokes a method with no parameters.
	 *
	 * <p>This uses reflection to invoke the method obtained from a call to
	 * {@link #getAccessibleMethod}(Class, String, Class[])}.</p>
	 *
	 * @param object invoke method on this object
	 * @param methodName get method with this name
	 * @param args use these arguments - treat null as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the
	 *  method invoked
	 * @throws IllegalAccessException if the requested method is not accessible
	 *  via reflection
	 */
	public static Object invokeExactMethod(@RUntainted final Object object, @RUntainted final String methodName, @RUntainted Object... args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    args = ArrayUtils.nullToEmpty(args);
	    return invokeExactMethod(object, methodName, args, ClassUtils.toClass(args));
	}

	/**
	 * Invokes a method whose parameter types match exactly the parameter
	 * types given.
	 *
	 * <p>This uses reflection to invoke the method obtained from a call to
	 * {@link #getAccessibleMethod(Class, String, Class[])}.</p>
	 *
	 * @param object invoke method on this object
	 * @param methodName get method with this name
	 * @param args use these arguments - treat null as empty array
	 * @param parameterTypes match these parameters - treat {@code null} as empty array
	 * @return The value returned by the invoked method
	 *
	 * @throws NoSuchMethodException if there is no such accessible method
	 * @throws InvocationTargetException wraps an exception thrown by the
	 *  method invoked
	 * @throws IllegalAccessException if the requested method is not accessible
	 *  via reflection
	 */
	public static Object invokeExactMethod(@RUntainted final Object object, @RUntainted final String methodName, @RUntainted Object[] args, @RUntainted Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
	    Objects.requireNonNull(object, "object");
	    args = ArrayUtils.nullToEmpty(args);
	    parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);
	    final Class<?> cls = object.getClass();
	    final Method method = getAccessibleMethod(cls, methodName, parameterTypes);
	    if (method == null) {
	        throw new NoSuchMethodException("No such accessible method: " + methodName + "() on object: " + cls.getName());
	    }
	    return method.invoke(object, args);
	}

}
